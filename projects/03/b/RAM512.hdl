// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux8Way(in=load, sel=address[6..8],
			a=aDMux64Way, b=bDMux64Way, c=cDMux64Way, d=dDMux64Way,
			e=eDMux64Way, f=fDMux64Way, g=gDMux64Way, h=hDMux64Way);
	RAM64(in=in, load=aDMux64Way, address=address[0..5], out=aRAM64);
	RAM64(in=in, load=bDMux64Way, address=address[0..5], out=bRAM64);
	RAM64(in=in, load=cDMux64Way, address=address[0..5], out=cRAM64);
	RAM64(in=in, load=dDMux64Way, address=address[0..5], out=dRAM64);
	RAM64(in=in, load=eDMux64Way, address=address[0..5], out=eRAM64);
	RAM64(in=in, load=fDMux64Way, address=address[0..5], out=fRAM64);
	RAM64(in=in, load=gDMux64Way, address=address[0..5], out=gRAM64);
	RAM64(in=in, load=hDMux64Way, address=address[0..5], out=hRAM64);
	Mux8Way16(a=aRAM64, b=bRAM64, c=cRAM64, d=dRAM64,
			e=eRAM64, f=fRAM64, g=gRAM64, h=hRAM64,
			sel=address[6..8], out=out);
}
