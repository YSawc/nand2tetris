// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:

	DMux8Way(in=load, sel=address[11..13],
			a=aDMux4KWay, b=bDMux4KWay, c=cDMux4KWay, d=dDMux4KWay,
			e=eDMux4KWay, f=fDMux4KWay, g=gDMux4KWay, h=hDMux4KWay);
	RAM4K(in=in, load=aDMux4KWay, address=address[0..11], out=aRAM4K);
	RAM4K(in=in, load=bDMux4KWay, address=address[0..11], out=bRAM4K);
	RAM4K(in=in, load=cDMux4KWay, address=address[0..11], out=cRAM4K);
	RAM4K(in=in, load=dDMux4KWay, address=address[0..11], out=dRAM4K);
	RAM4K(in=in, load=eDMux4KWay, address=address[0..11], out=eRAM4K);
	RAM4K(in=in, load=fDMux4KWay, address=address[0..11], out=fRAM4K);
	RAM4K(in=in, load=gDMux4KWay, address=address[0..11], out=gRAM4K);
	RAM4K(in=in, load=hDMux4KWay, address=address[0..11], out=hRAM4K);
	Mux8Way16(a=aRAM4K, b=bRAM4K, c=cRAM4K, d=dRAM4K,
			e=eRAM4K, f=fRAM4K, g=gRAM4K, h=hRAM4K,
			sel=address[11..13], out=out);
}
