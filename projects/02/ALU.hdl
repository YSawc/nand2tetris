// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	And(a=zx, b=zx, out=zxAndOut);
	Not(in=x[0], out=xNotOut0);
	Nand(a=x[0], b=xNotOut0, out=zxOut0);
	Not(in=x[1], out=xNotOut1);
	Nand(a=x[1], b=xNotOut1, out=zxOut1);
	Not(in=x[2], out=xNotOut2);
	Nand(a=x[2], b=xNotOut2, out=zxOut2);
	Not(in=x[3], out=xNotOut3);
	Nand(a=x[3], b=xNotOut3, out=zxOut3);
	Not(in=x[4], out=xNotOut4);
	Nand(a=x[4], b=xNotOut4, out=zxOut4);
	Not(in=x[5], out=xNotOut5);
	Nand(a=x[5], b=xNotOut5, out=zxOut5);
	Not(in=x[6], out=xNotOut6);
	Nand(a=x[6], b=xNotOut6, out=zxOut6);
	Not(in=x[7], out=xNotOut7);
	Nand(a=x[7], b=xNotOut7, out=zxOut7);
	Not(in=x[8], out=xNotOut8);
	Nand(a=x[8], b=xNotOut8, out=zxOut8);
	Not(in=x[9], out=xNotOut9);
	Nand(a=x[9], b=xNotOut9, out=zxOut9);
	Not(in=x[10], out=xNotOut10);
	Nand(a=x[10], b=xNotOut10, out=zxOut10);
	Not(in=x[11], out=xNotOut11);
	Nand(a=x[11], b=xNotOut11, out=zxOut11);
	Not(in=x[12], out=xNotOut12);
	Nand(a=x[12], b=xNotOut12, out=zxOut12);
	Not(in=x[13], out=xNotOut13);
	Nand(a=x[13], b=xNotOut13, out=zxOut13);
	Not(in=x[14], out=xNotOut14);
	Nand(a=x[14], b=xNotOut14, out=zxOut14);
	Not(in=x[15], out=xNotOut15);
	Nand(a=x[15], b=xNotOut15, out=zxOut15);

	And(a=nx, b=nx, out=nxNandOut);
	Not(in=x[0], out=nxOut0);
	Not(in=x[1], out=nxOut1);
	Not(in=x[2], out=nxOut2);
	Not(in=x[3], out=nxOut3);
	Not(in=x[4], out=nxOut4);
	Not(in=x[5], out=nxOut5);
	Not(in=x[6], out=nxOut6);
	Not(in=x[7], out=nxOut7);
	Not(in=x[8], out=nxOut8);
	Not(in=x[9], out=nxOut9);
	Not(in=x[10], out=nxOut10);
	Not(in=x[11], out=nxOut11);
	Not(in=x[12], out=nxOut12);
	Not(in=x[13], out=nxOut13);
	Not(in=x[14], out=nxOut14);
	Not(in=x[15], out=nxOut15);

	And(a=zy, b=zy, out=zxNandOut);
	Not(in=y[0], out=yNotOut0);
	Nand(a=y[0], b=yNotOut0, out=zyOut0);
	Not(in=y[1], out=yNotOut1);
	Nand(a=y[1], b=yNotOut1, out=zyOut1);
	Not(in=y[2], out=yNotOut2);
	Nand(a=y[2], b=yNotOut2, out=zyOut2);
	Not(in=y[3], out=yNotOut3);
	Nand(a=y[3], b=yNotOut3, out=zyOut3);
	Not(in=y[4], out=yNotOut4);
	Nand(a=y[4], b=yNotOut4, out=zyOut4);
	Not(in=y[5], out=yNotOut5);
	Nand(a=y[5], b=yNotOut5, out=zyOut5);
	Not(in=y[6], out=yNotOut6);
	Nand(a=y[6], b=yNotOut6, out=zyOut6);
	Not(in=y[7], out=yNotOut7);
	Nand(a=y[7], b=yNotOut7, out=zyOut7);
	Not(in=y[8], out=yNotOut8);
	Nand(a=y[8], b=yNotOut8, out=zyOut8);
	Not(in=y[9], out=yNotOut9);
	Nand(a=y[9], b=yNotOut9, out=zyOut9);
	Not(in=y[10], out=yNotOut10);
	Nand(a=y[10], b=yNotOut10, out=zyOut10);
	Not(in=y[11], out=yNotOut11);
	Nand(a=y[11], b=yNotOut11, out=zyOut11);
	Not(in=y[12], out=yNotOut12);
	Nand(a=y[12], b=yNotOut12, out=zyOut12);
	Not(in=y[13], out=yNotOut13);
	Nand(a=y[13], b=yNotOut13, out=zyOut13);
	Not(in=y[14], out=yNotOut14);
	Nand(a=y[14], b=yNotOut14, out=zyOut14);
	Not(in=y[15], out=yNotOut15);
	Nand(a=y[15], b=yNotOut15, out=zyOut15);

	And(a=ny, b=ny, out=nyNandOut);
	Not(in=y[0], out=nyOut0);
	Not(in=y[1], out=nyOut1);
	Not(in=y[2], out=nyOut2);
	Not(in=y[3], out=nyOut3);
	Not(in=y[4], out=nyOut4);
	Not(in=y[5], out=nyOut5);
	Not(in=y[6], out=nyOut6);
	Not(in=y[7], out=nyOut7);
	Not(in=y[8], out=nyOut8);
	Not(in=y[9], out=nyOut9);
	Not(in=y[10], out=nyOut10);
	Not(in=y[11], out=nyOut11);
	Not(in=y[12], out=nyOut12);
	Not(in=y[13], out=nyOut13);
	Not(in=y[14], out=nyOut14);
	Not(in=y[15], out=nyOut15);

	And(a=no, b=no, out=noAndOut);
	Not(in=preOut0, out=out[0]);
	Not(in=preOut1, out=out[1]);
	Not(in=preOut2, out=out[2]);
	Not(in=preOut3, out=out[3]);
	Not(in=preOut4, out=out[4]);
	Not(in=preOut5, out=out[5]);
	Not(in=preOut6, out=out[6]);
	Not(in=preOut7, out=out[7]);
	Not(in=preOut8, out=out[8]);
	Not(in=preOut9, out=out[9]);
	Not(in=preOut10, out=out[10]);
	Not(in=preOut11, out=out[11]);
	Not(in=preOut12, out=out[12]);
	Not(in=preOut13, out=out[13]);
	Not(in=preOut14, out=out[14]);
	Not(in=preOut15, out=out[15]);

	Not(in=out[0], out=zr0);
	Not(in=out[1], out=zr1);
	Not(in=out[2], out=zr2);
	Not(in=out[3], out=zr3);
	Not(in=out[4], out=zr4);
	Not(in=out[5], out=zr5);
	Not(in=out[6], out=zr6);
	Not(in=out[7], out=zr7);
	Not(in=out[8], out=zr8);
	Not(in=out[9], out=zr9);
	Not(in=out[10], out=zr10);
	Not(in=out[11], out=zr11);
	Not(in=out[12], out=zr12);
	Not(in=out[13], out=zr13);
	Not(in=out[14], out=zr14);
	Not(in=out[15], out=zr15);
	And(a=out[0], b=out[1], out=zrAnd0::0);
	And(a=out[2], b=out[3], out=zrAnd1::0);
	And(a=out[4], b=out[5], out=zrAnd2::0);
	And(a=out[6], b=out[7], out=zrAnd3::0);
	And(a=out[8], b=out[9], out=zrAnd4::0);
	And(a=out[10], b=out[11], out=zrAnd5::0);
	And(a=out[12], b=out[13], out=zrAnd6::0);
	And(a=out[14], b=out[15], out=zrAnd7::0);
	And(a=zrAnd0::0, b=zrAnd1::0,out=zrAnd0::1);
	And(a=zrAnd2::0, b=zrAnd3::0,out=zrAnd1::1);
	And(a=zrAnd4::0, b=zrAnd5::0,out=zrAnd2::1);
	And(a=zrAnd6::0, b=zrAnd7::0,out=zrAnd3::1);
	And(a=zrAnd8::0, b=zrAnd9::0,out=zrAnd4::1);
	And(a=zrAnd10::0, b=zrAnd11::0,out=zrAnd5::1);
	And(a=zrAnd12::0, b=zrAnd13::0,out=zrAnd6::1);
	And(a=zrAnd14::0, b=zrAnd15::0,out=zrAnd7::1);
	And(a=zrAnd0::1, b=zrAnd1::1,out=zrAnd0::2);
	And(a=zrAnd2::1, b=zrAnd3::1,out=zrAnd1::2);
	And(a=zrAnd4::1, b=zrAnd5::1,out=zrAnd2::2);
	And(a=zrAnd6::1, b=zrAnd7::1,out=zrAnd3::2);
	And(a=zrAnd0::2, b=zrAnd1::2,out=zrAnd0::3);
	And(a=zrAnd2::2, b=zrAnd3::2,out=zrAnd1::3);
	And(a=zrAnd0::3, b=zrAnd0::3,out=zr);
}
