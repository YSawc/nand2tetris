// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	Mux16(a=x, b[0..15]=false, sel=zx, out=zxOut);

	Mux16(a=x[0..15], b[0..15]=!x, sel=nx, out=nxOut);

	Mux16(a=y, b[0..15]=false, sel=zy, out=zyOut);

	Mux16(a=y[0..15], b[0..15]=!y, sel=ny, out=nyOut);

	Add16(a=x[0..15], b=y[0..15], out=fAdd16Out);
	And16(a=x[0..15], b=y[0..15], out=fAnd16Out);
	Mux16(a=fAndOut, b=fAnd16Out, sel=f, out=fOut);

	Not(in=out[0], out=zr0);
	Not(in=out[1], out=zr1);
	Not(in=out[2], out=zr2);
	Not(in=out[3], out=zr3);
	Not(in=out[4], out=zr4);
	Not(in=out[5], out=zr5);
	Not(in=out[6], out=zr6);
	Not(in=out[7], out=zr7);
	Not(in=out[8], out=zr8);
	Not(in=out[9], out=zr9);
	Not(in=out[10], out=zr10);
	Not(in=out[11], out=zr11);
	Not(in=out[12], out=zr12);
	Not(in=out[13], out=zr13);
	Not(in=out[14], out=zr14);
	Not(in=out[15], out=zr15);
	And(a=out[0], b=out[1], out=zrAnd0::0);
	And(a=out[2], b=out[3], out=zrAnd1::0);
	And(a=out[4], b=out[5], out=zrAnd2::0);
	And(a=out[6], b=out[7], out=zrAnd3::0);
	And(a=out[8], b=out[9], out=zrAnd4::0);
	And(a=out[10], b=out[11], out=zrAnd5::0);
	And(a=out[12], b=out[13], out=zrAnd6::0);
	And(a=out[14], b=out[15], out=zrAnd7::0);
	And(a=zrAnd0::0, b=zrAnd1::0,out=zrAnd0::1);
	And(a=zrAnd2::0, b=zrAnd3::0,out=zrAnd1::1);
	And(a=zrAnd4::0, b=zrAnd5::0,out=zrAnd2::1);
	And(a=zrAnd6::0, b=zrAnd7::0,out=zrAnd3::1);
	And(a=zrAnd8::0, b=zrAnd9::0,out=zrAnd4::1);
	And(a=zrAnd10::0, b=zrAnd11::0,out=zrAnd5::1);
	And(a=zrAnd12::0, b=zrAnd13::0,out=zrAnd6::1);
	And(a=zrAnd14::0, b=zrAnd15::0,out=zrAnd7::1);
	And(a=zrAnd0::1, b=zrAnd1::1,out=zrAnd0::2);
	And(a=zrAnd2::1, b=zrAnd3::1,out=zrAnd1::2);
	And(a=zrAnd4::1, b=zrAnd5::1,out=zrAnd2::2);
	And(a=zrAnd6::1, b=zrAnd7::1,out=zrAnd3::2);
	And(a=zrAnd0::2, b=zrAnd1::2,out=zrAnd0::3);
	And(a=zrAnd2::2, b=zrAnd3::2,out=zrAnd1::3);
	And(a=zrAnd0::3, b=zrAnd0::3,out=zr);
}
