// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	Nand(a=zx, b=zx, out=zxNandOut);
	Not(in=x[0], out=xNotOut0);
	Nand(a=x[0], b=xNotOut0, out=zxOut0);
	Not(in=x[1], out=xNotOut1);
	Nand(a=x[1], b=xNotOut1, out=zxOut1);
	Not(in=x[2], out=xNotOut2);
	Nand(a=x[2], b=xNotOut2, out=zxOut2);
	Not(in=x[3], out=xNotOut3);
	Nand(a=x[3], b=xNotOut3, out=zxOut3);
	Not(in=x[4], out=xNotOut4);
	Nand(a=x[4], b=xNotOut4, out=zxOut4);
	Not(in=x[5], out=xNotOut5);
	Nand(a=x[5], b=xNotOut5, out=zxOut5);
	Not(in=x[6], out=xNotOut6);
	Nand(a=x[6], b=xNotOut6, out=zxOut6);
	Not(in=x[7], out=xNotOut7);
	Nand(a=x[7], b=xNotOut7, out=zxOut7);
	Not(in=x[8], out=xNotOut8);
	Nand(a=x[8], b=xNotOut8, out=zxOut8);
	Not(in=x[9], out=xNotOut9);
	Nand(a=x[9], b=xNotOut9, out=zxOut9);
	Not(in=x[10], out=xNotOut10);
	Nand(a=x[10], b=xNotOut10, out=zxOut10);
	Not(in=x[11], out=xNotOut11);
	Nand(a=x[11], b=xNotOut11, out=zxOut11);
	Not(in=x[12], out=xNotOut12);
	Nand(a=x[12], b=xNotOut12, out=zxOut12);
	Not(in=x[13], out=xNotOut13);
	Nand(a=x[13], b=xNotOut13, out=zxOut13);
	Not(in=x[14], out=xNotOut14);
	Nand(a=x[14], b=xNotOut14, out=zxOut14);
	Not(in=x[15], out=xNotOut15);
	Nand(a=x[15], b=xNotOut15, out=zxOut15);
}
